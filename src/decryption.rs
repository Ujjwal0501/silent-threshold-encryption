use ark_ec::{
    pairing::{Pairing, PairingOutput},
    VariableBaseMSM,
};
use ark_poly::{
    univariate::DensePolynomial, DenseUVPolynomial, EvaluationDomain, Polynomial,
    Radix2EvaluationDomain,
};
use ark_std::{One, Zero};
use std::ops::Div;

use crate::{
    encryption::Ciphertext,
    kzg::{PowersOfTau, KZG10},
    setup::AggregateKey,
    utils::interp_mostly_zero,
};
use hkdf::Hkdf;
use sha2::Sha256;
use ark_serialize::{CanonicalSerialize, CanonicalDeserialize};

#[derive(CanonicalSerialize, CanonicalDeserialize, Clone)]
pub struct PartialDecryptions<E: Pairing> {
    pub part_dec: Vec<E::G2>,
}

pub fn agg_dec<E: Pairing>(
    partial_decryptions: &[E::G2], //insert 0 if a party did not respond or verification failed
    ct: &Ciphertext<E>,
    selector: &[bool],
    agg_key: &AggregateKey<E>,
    params: &PowersOfTau<E>,
) -> PairingOutput<E> {
    let n = agg_key.pk.len();
    let domain = Radix2EvaluationDomain::<E::ScalarField>::new(n).unwrap();
    let domain_elements: Vec<E::ScalarField> = domain.elements().collect();

    // points is where B is set to zero
    // parties is the set of parties who have signed
    let mut points = vec![domain_elements[0]]; // 0 is the dummy party that is always true
    let mut parties: Vec<usize> = Vec::new(); // parties indexed from 0..n-1
    for i in 0..n {
        if selector[i] {
            parties.push(i);
        } else {
            points.push(domain_elements[i]);
        }
    }

    let b = interp_mostly_zero(E::ScalarField::one(), &points);
    let b_evals = domain.fft(&b.coeffs);

    debug_assert!(b.degree() == points.len() - 1);
    debug_assert!(b.evaluate(&domain_elements[0]) == E::ScalarField::one());

    // commit to b in g2
    let b_g2: E::G2 = KZG10::<E, DensePolynomial<E::ScalarField>>::commit_g2(params, &b)
        .unwrap()
        .into();

    // q0 = (b-1)/(x-domain_elements[0])
    let mut bminus1 = b.clone();
    bminus1.coeffs[0] -= E::ScalarField::one();

    debug_assert!(bminus1.evaluate(&domain_elements[0]) == E::ScalarField::zero());

    let xminus1 =
        DensePolynomial::from_coefficients_vec(vec![-domain_elements[0], E::ScalarField::one()]);
    let q0 = bminus1.div(&xminus1);

    let q0_g1: E::G1 = KZG10::<E, DensePolynomial<E::ScalarField>>::commit_g1(params, &q0)
        .unwrap()
        .into();

    // bhat = x^t * b
    // insert t 0s at the beginning of bhat.coeffs
    let mut bhat_coeffs = vec![E::ScalarField::zero(); ct.t];
    bhat_coeffs.append(&mut b.coeffs.clone());
    let bhat = DensePolynomial::from_coefficients_vec(bhat_coeffs);
    debug_assert_eq!(bhat.degree(), n - 1);

    let bhat_g1: E::G1 = KZG10::<E, DensePolynomial<E::ScalarField>>::commit_g1(params, &bhat)
        .unwrap()
        .into();

    let n_inv = E::ScalarField::one() / E::ScalarField::from((n) as u32);

    // compute the aggregate public key
    let mut bases: Vec<<E as Pairing>::G1Affine> = Vec::new();
    let mut scalars: Vec<<E as Pairing>::ScalarField> = Vec::new();
    for &i in &parties {
        bases.push(agg_key.pk[i].bls_pk.into());
        scalars.push(b_evals[i]);
    }
    let mut apk = E::G1::msm(bases.as_slice(), scalars.as_slice()).unwrap();
    apk *= n_inv;

    // compute sigma = (\sum B(omega^i)partial_decryptions[i])/(n) for i in parties
    let mut bases: Vec<<E as Pairing>::G2Affine> = Vec::new();
    let mut scalars: Vec<<E as Pairing>::ScalarField> = Vec::new();
    for &i in &parties {
        bases.push(partial_decryptions[i].into());
        scalars.push(b_evals[i]);
    }
    let mut sigma = E::G2::msm(bases.as_slice(), scalars.as_slice()).unwrap();
    sigma *= n_inv;

    // compute Qx, Qhatx and Qz
    let mut bases: Vec<<E as Pairing>::G1Affine> = Vec::new();
    let mut scalars: Vec<<E as Pairing>::ScalarField> = Vec::new();
    for &i in &parties {
        bases.push(agg_key.pk[i].sk_li_x.into());
        scalars.push(b_evals[i]);
    }
    let qx = E::G1::msm(bases.as_slice(), scalars.as_slice()).unwrap();

    let mut bases: Vec<<E as Pairing>::G1Affine> = Vec::new();
    let mut scalars: Vec<<E as Pairing>::ScalarField> = Vec::new();
    for &i in &parties {
        bases.push(agg_key.agg_sk_li_lj_z[i].into());
        scalars.push(b_evals[i]);
    }
    let qz = E::G1::msm(bases.as_slice(), scalars.as_slice()).unwrap();

    let mut bases: Vec<<E as Pairing>::G1Affine> = Vec::new();
    let mut scalars: Vec<<E as Pairing>::ScalarField> = Vec::new();
    for &i in &parties {
        bases.push(agg_key.pk[i].sk_li_minus0.into());
        scalars.push(b_evals[i]);
    }
    let qhatx = E::G1::msm(bases.as_slice(), scalars.as_slice()).unwrap();

    // e(w1||sa1, sa2||w2)
    let minus1 = -E::ScalarField::one();
    let w1 = [
        apk * (minus1),
        qz * (minus1),
        qx * (minus1),
        qhatx,
        bhat_g1 * (minus1),
        q0_g1 * (minus1),
    ];
    let w2 = [b_g2, sigma];

    let mut enc_key_lhs = w1.to_vec();
    enc_key_lhs.append(&mut ct.sa1.to_vec());

    let mut enc_key_rhs = ct.sa2.to_vec();
    enc_key_rhs.append(&mut w2.to_vec());

    let enc_key = E::multi_pairing(enc_key_lhs, enc_key_rhs);

    // assert_eq!(enc_key, ct.enc_key);

    enc_key
}

pub fn derive_shared_secret<E: Pairing>(
    salt: &[u8; 32],
    partial_decryptions: &[E::G2],
    ct: &Ciphertext<E>,
    agg_key: &AggregateKey<E>,
    kzg_params: &PowersOfTau<E>,
) -> Vec<u8> {
    let selector: Vec<bool> = partial_decryptions.iter().map(|pd| !pd.is_zero()).collect();
    let mut true_count = 0;
    let selector: Vec<bool> = selector
        .iter()
        .enumerate()
        .map(|(i, &s)| {
            if s && true_count < (ct.t + 1) {
                true_count += 1;
                true
            } else {
                false
            }
        })
        .collect();
    let dec_key = agg_dec(partial_decryptions, ct, selector.as_slice(), agg_key, kzg_params);
    let mut ikm = vec![];
    dec_key.serialize_compressed(&mut ikm).unwrap();

    // Use a unique salt in a real application
    let info = b"aes_encryption";
    let salt = vec![0u8; 32];
    let hk = Hkdf::<Sha256>::new(Some(&salt), &ikm);

    let mut okm = [0u8; 32]; // Output key material (256-bit key)
    hk.expand(info, &mut okm).expect("HKDF expand failed");

    let okm = hex::decode("f0a00f5b51d82818613f3b73c0a80f3eec2b55aa799a3941fd2420fc5f0b9d1e").unwrap();
    okm.to_vec()
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::{
        encryption::encrypt,
        kzg::KZG10,
        setup::{PublicKey, SecretKey},
    };
    use ark_poly::univariate::DensePolynomial;
    use ark_std::UniformRand;
    use ark_ec::AdditiveGroup;
    use ark_ff::{Field, Fp12};
    use ark_ec::PrimeGroup;

    type E = ark_bls12_381::Bls12_381;
    type G2 = <E as Pairing>::G2;
    type G1= <E as Pairing>::G1;
    type GT = <E as Pairing>::TargetField;
    type Fr = <E as Pairing>::ScalarField;
    type UniPoly381 = DensePolynomial<<E as Pairing>::ScalarField>;
    use chacha20poly1305::{
        aead::{Aead, KeyInit, OsRng},
        ChaCha20Poly1305, Key, Nonce,
    };


    #[test]
    fn test_decryption() {
        let mut rng = ark_std::test_rng();
        let n = 1 << 4; // actually n-1 total parties. one party is a dummy party that is always true
        let t: usize = n / 2;
        debug_assert!(t < n);

        let tau = Fr::rand(&mut rng);
        let params = KZG10::<E, UniPoly381>::setup(n, tau.clone()).unwrap();

        let mut sk: Vec<SecretKey<E>> = Vec::new();
        let mut pk: Vec<PublicKey<E>> = Vec::new();

        // create the dummy party's keys
        sk.push(SecretKey::<E>::new(&mut rng));
        sk[0].nullify();
        pk.push(sk[0].get_pk(0, &params, n));

        for i in 1..n {
            println!("Creating key pair for party {}", i);
            sk.push(SecretKey::<E>::new(&mut rng));
            pk.push(sk[i].get_pk(i, &params, n))
        }

        let agg_key = AggregateKey::<E>::new(pk, &params);
        let ct = encrypt::<E>(&agg_key, t, &params);

        // compute partial decryptions
        let mut partial_decryptions: Vec<G2> = Vec::new();
        for i in 0..t + 1 {
            partial_decryptions.push(sk[i].partial_decryption(&ct));
        }
        for _ in t + 1..n {
            partial_decryptions.push(G2::zero());
        }

        // compute the decryption key
        let mut selector: Vec<bool> = Vec::new();
        for _ in 0..t + 1 {
            selector.push(true);
        }
        for _ in t + 1..n {
            selector.push(false);
        }

        let _dec_key = agg_dec(&partial_decryptions, &ct, &selector, &agg_key, &params);
    }

    #[test]
    fn test_key_gen() {
        let agg_bytes: Vec<u8> = vec![4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151, 241, 211, 167, 49, 151, 215, 148, 38, 149, 99, 140, 79, 169, 172, 15, 195, 104, 140, 79, 151, 116, 185, 5, 161, 78, 58, 63, 23, 27, 172, 88, 108, 85, 232, 63, 249, 122, 26, 239, 251, 58, 240, 10, 219, 34, 198, 187, 168, 106, 89, 18, 157, 171, 199, 130, 159, 247, 4, 167, 97, 83, 218, 21, 38, 50, 20, 137, 180, 244, 28, 31, 197, 183, 52, 246, 235, 51, 70, 19, 250, 164, 114, 23, 79, 82, 255, 2, 20, 255, 166, 20, 218, 73, 164, 123, 129, 182, 232, 2, 95, 123, 137, 7, 62, 130, 127, 232, 174, 152, 163, 218, 205, 165, 124, 232, 38, 9, 81, 193, 56, 86, 248, 252, 134, 231, 68, 124, 40, 25, 195, 206, 53, 75, 66, 105, 19, 136, 209, 42, 236, 61, 248, 124, 4, 0, 0, 0, 0, 0, 0, 0, 168, 132, 157, 54, 96, 223, 53, 208, 62, 153, 229, 193, 172, 20, 249, 132, 57, 144, 30, 105, 147, 129, 213, 133, 203, 11, 152, 94, 198, 98, 9, 212, 165, 116, 104, 54, 103, 74, 11, 250, 156, 39, 132, 212, 233, 140, 66, 70, 161, 84, 58, 137, 79, 241, 59, 159, 253, 130, 6, 10, 158, 187, 170, 35, 246, 27, 105, 57, 74, 86, 42, 107, 95, 20, 102, 27, 58, 104, 223, 30, 71, 129, 24, 141, 27, 222, 136, 134, 197, 160, 71, 229, 2, 99, 208, 239, 170, 1, 205, 151, 80, 214, 87, 205, 129, 216, 1, 70, 42, 209, 37, 175, 99, 140, 63, 186, 85, 48, 250, 63, 58, 234, 209, 243, 83, 249, 248, 12, 22, 104, 69, 11, 224, 153, 13, 251, 44, 71, 57, 248, 12, 106, 97, 19, 139, 187, 195, 216, 6, 18, 224, 84, 140, 252, 124, 249, 49, 221, 242, 83, 209, 58, 225, 95, 67, 198, 222, 254, 85, 59, 62, 139, 248, 105, 162, 227, 225, 244, 226, 163, 24, 180, 86, 171, 16, 124, 140, 3, 87, 9, 59, 240, 134, 82, 81, 152, 139, 19, 152, 154, 199, 162, 23, 97, 158, 220, 254, 74, 215, 13, 205, 24, 70, 164, 192, 237, 67, 178, 239, 58, 118, 187, 184, 77, 153, 153, 132, 99, 184, 130, 48, 139, 131, 181, 136, 245, 180, 138, 188, 144, 1, 0, 0, 0, 0, 0, 0, 0, 135, 199, 122, 175, 143, 73, 122, 54, 91, 249, 238, 31, 234, 108, 206, 161, 110, 218, 5, 123, 113, 244, 250, 208, 105, 83, 17, 252, 72, 200, 14, 185, 90, 250, 62, 172, 237, 106, 60, 235, 83, 64, 194, 174, 211, 124, 124, 123, 176, 242, 121, 85, 115, 104, 185, 205, 137, 24, 239, 207, 27, 200, 194, 104, 55, 64, 56, 157, 247, 141, 212, 159, 22, 245, 87, 226, 140, 190, 47, 143, 103, 86, 253, 249, 219, 151, 45, 14, 127, 63, 171, 139, 112, 77, 71, 45, 148, 42, 123, 82, 148, 129, 50, 218, 199, 209, 79, 99, 167, 206, 86, 116, 27, 3, 18, 157, 246, 126, 48, 198, 168, 8, 102, 168, 78, 90, 195, 31, 91, 54, 121, 197, 14, 105, 248, 233, 65, 76, 8, 147, 12, 65, 210, 233, 4, 0, 0, 0, 0, 0, 0, 0, 136, 240, 178, 51, 66, 176, 209, 62, 89, 59, 164, 143, 108, 88, 23, 170, 167, 168, 101, 161, 214, 149, 159, 116, 243, 137, 30, 3, 206, 76, 245, 32, 106, 172, 194, 231, 235, 121, 164, 3, 190, 135, 217, 201, 48, 244, 13, 34, 170, 247, 16, 134, 45, 7, 23, 189, 247, 166, 83, 121, 17, 48, 233, 31, 127, 114, 27, 228, 57, 66, 218, 229, 87, 150, 43, 42, 251, 205, 180, 33, 73, 55, 245, 10, 76, 152, 153, 198, 76, 47, 127, 45, 172, 187, 166, 43, 164, 39, 59, 46, 91, 113, 182, 64, 85, 227, 102, 21, 195, 52, 156, 9, 146, 130, 172, 55, 3, 91, 208, 88, 27, 235, 75, 217, 243, 59, 39, 36, 229, 176, 198, 229, 34, 34, 7, 233, 142, 164, 6, 0, 13, 164, 48, 64, 136, 219, 158, 142, 230, 10, 255, 70, 254, 176, 145, 28, 255, 31, 188, 37, 159, 118, 110, 254, 23, 211, 245, 5, 60, 67, 228, 136, 232, 239, 238, 41, 170, 118, 167, 78, 106, 214, 18, 213, 159, 109, 126, 62, 192, 145, 208, 241, 141, 131, 214, 255, 79, 232, 124, 243, 251, 27, 116, 37, 25, 86, 3, 72, 220, 223, 177, 11, 157, 117, 210, 5, 58, 250, 139, 97, 156, 69, 147, 230, 157, 132, 204, 155, 127, 107, 163, 46, 72, 222, 216, 252, 180, 71, 156, 127, 2, 0, 0, 0, 0, 0, 0, 0, 165, 21, 211, 176, 211, 200, 34, 205, 37, 98, 182, 101, 125, 231, 204, 116, 202, 206, 174, 124, 231, 10, 248, 116, 250, 47, 111, 126, 144, 93, 50, 164, 49, 39, 75, 176, 125, 121, 109, 112, 98, 142, 230, 204, 24, 50, 84, 181, 128, 109, 221, 146, 124, 225, 100, 226, 11, 87, 3, 21, 131, 238, 51, 13, 72, 105, 17, 220, 36, 139, 147, 190, 64, 244, 237, 87, 104, 100, 62, 121, 90, 102, 197, 108, 34, 38, 75, 214, 198, 65, 243, 200, 171, 80, 33, 244, 145, 181, 29, 36, 84, 247, 40, 23, 59, 130, 111, 38, 164, 191, 15, 80, 194, 242, 154, 31, 59, 153, 36, 52, 80, 25, 161, 186, 247, 2, 223, 91, 24, 171, 7, 83, 197, 228, 2, 26, 200, 224, 238, 29, 229, 76, 58, 224, 4, 0, 0, 0, 0, 0, 0, 0, 162, 55, 136, 217, 130, 45, 116, 90, 112, 195, 40, 140, 80, 249, 197, 97, 36, 83, 237, 108, 27, 196, 137, 192, 105, 57, 84, 220, 225, 235, 235, 118, 60, 148, 47, 248, 4, 40, 223, 33, 207, 128, 209, 252, 63, 20, 20, 77, 153, 95, 93, 3, 193, 169, 110, 7, 247, 12, 21, 114, 211, 158, 94, 56, 255, 58, 219, 73, 43, 167, 251, 152, 14, 99, 186, 136, 41, 33, 2, 43, 187, 51, 168, 210, 67, 64, 122, 142, 12, 40, 69, 196, 131, 222, 205, 79, 178, 101, 247, 80, 171, 187, 47, 235, 250, 217, 32, 165, 241, 212, 14, 90, 168, 13, 220, 98, 165, 252, 69, 104, 18, 1, 4, 199, 231, 218, 102, 44, 172, 75, 163, 187, 78, 224, 123, 23, 214, 27, 238, 8, 215, 25, 44, 126, 152, 160, 162, 144, 9, 141, 158, 214, 117, 87, 183, 251, 150, 31, 75, 56, 134, 35, 140, 124, 195, 81, 151, 156, 175, 137, 48, 233, 104, 205, 72, 138, 76, 157, 159, 114, 153, 13, 143, 197, 74, 227, 179, 172, 181, 240, 116, 79, 183, 85, 175, 145, 190, 225, 200, 101, 109, 116, 141, 117, 35, 75, 172, 110, 224, 31, 186, 239, 247, 225, 141, 240, 147, 243, 249, 14, 29, 250, 194, 182, 153, 14, 119, 89, 242, 203, 181, 119, 131, 42, 202, 160, 167, 104, 22, 32, 3, 0, 0, 0, 0, 0, 0, 0, 185, 248, 132, 184, 137, 133, 140, 161, 219, 163, 255, 115, 213, 217, 250, 123, 235, 105, 170, 122, 241, 3, 166, 93, 96, 213, 11, 78, 31, 135, 185, 203, 193, 80, 226, 102, 11, 131, 6, 42, 167, 113, 66, 16, 70, 127, 231, 224, 182, 119, 45, 187, 138, 4, 25, 25, 117, 245, 203, 104, 103, 220, 35, 69, 214, 231, 68, 111, 225, 87, 249, 127, 197, 87, 118, 187, 45, 139, 83, 86, 69, 153, 228, 71, 252, 10, 197, 28, 101, 139, 75, 56, 254, 175, 140, 61, 134, 159, 172, 230, 14, 218, 41, 207, 246, 242, 80, 43, 28, 250, 108, 244, 103, 143, 78, 107, 72, 33, 220, 92, 227, 10, 87, 168, 27, 114, 230, 77, 45, 104, 175, 141, 128, 82, 76, 228, 147, 69, 182, 155, 33, 30, 247, 178, 4, 0, 0, 0, 0, 0, 0, 0, 165, 101, 175, 187, 113, 117, 40, 6, 181, 4, 66, 111, 180, 64, 28, 93, 255, 114, 235, 55, 192, 103, 56, 91, 176, 90, 211, 73, 130, 102, 152, 59, 44, 239, 229, 126, 220, 206, 189, 78, 43, 227, 25, 51, 218, 219, 25, 149, 160, 102, 100, 27, 167, 212, 122, 110, 32, 186, 155, 119, 103, 220, 71, 132, 69, 126, 236, 188, 216, 205, 178, 154, 96, 180, 32, 226, 65, 218, 149, 119, 212, 14, 133, 40, 119, 122, 175, 63, 176, 136, 151, 137, 64, 138, 8, 241, 136, 222, 144, 86, 216, 102, 127, 118, 96, 15, 150, 234, 188, 228, 84, 10, 172, 246, 81, 135, 32, 183, 22, 173, 164, 83, 186, 146, 68, 141, 168, 165, 229, 126, 238, 53, 165, 158, 0, 10, 107, 25, 108, 91, 244, 26, 148, 253, 137, 239, 177, 219, 186, 50, 49, 48, 187, 180, 184, 100, 107, 211, 172, 238, 63, 244, 111, 72, 184, 255, 171, 222, 101, 133, 192, 165, 100, 38, 160, 132, 80, 73, 153, 41, 217, 250, 62, 203, 56, 126, 187, 229, 101, 161, 191, 146, 161, 244, 51, 132, 153, 29, 50, 75, 157, 72, 65, 110, 194, 179, 130, 154, 233, 204, 21, 189, 193, 193, 241, 108, 109, 98, 38, 94, 64, 189, 12, 103, 223, 90, 38, 230, 104, 64, 102, 85, 172, 145, 173, 225, 117, 150, 159, 212, 4, 0, 0, 0, 0, 0, 0, 0, 175, 173, 198, 18, 79, 223, 147, 13, 198, 237, 92, 150, 199, 3, 164, 199, 201, 213, 33, 14, 72, 108, 30, 127, 85, 16, 228, 89, 105, 212, 171, 159, 29, 18, 29, 220, 100, 21, 121, 197, 254, 5, 8, 96, 206, 135, 65, 91, 182, 178, 184, 75, 237, 127, 246, 64, 180, 29, 84, 61, 27, 123, 56, 50, 247, 209, 108, 121, 226, 140, 180, 100, 37, 220, 29, 250, 183, 174, 153, 57, 106, 47, 111, 120, 206, 49, 94, 245, 144, 129, 229, 223, 46, 238, 47, 113, 146, 224, 244, 173, 206, 187, 35, 5, 74, 143, 0, 136, 153, 30, 122, 71, 190, 232, 81, 51, 174, 32, 172, 218, 250, 170, 45, 159, 230, 199, 149, 140, 129, 207, 137, 71, 140, 188, 93, 206, 91, 12, 12, 38, 111, 134, 172, 104, 171, 108, 36, 46, 182, 236, 83, 171, 66, 84, 113, 244, 189, 151, 198, 77, 75, 103, 132, 227, 223, 44, 8, 204, 112, 104, 176, 244, 222, 8, 0, 108, 244, 177, 194, 24, 234, 190, 105, 107, 28, 165, 26, 120, 110, 198, 75, 9, 184, 11, 200, 238, 54, 210, 178, 90, 209, 115, 139, 148, 226, 135, 66, 113, 84, 60, 186, 25, 199, 34, 166, 87, 97, 43, 137, 53, 71, 65, 128, 5, 202, 167, 41, 52, 203, 229, 35, 191, 249, 173, 187, 250, 238, 236, 220, 203, 153, 0, 71, 130, 130, 171, 195, 81, 219, 208, 174, 186, 184, 183, 213, 97, 100, 144, 229, 34, 236, 77, 248, 40, 191, 22, 26, 21, 70, 166, 71, 237, 88, 196, 178, 167, 101, 169, 96, 53, 190, 230, 162, 238, 27, 231, 108, 8, 10, 2, 187, 99, 166, 168, 63, 79, 3, 172, 248, 163, 64, 105, 52, 255, 196, 185, 226, 181, 163, 95, 245, 46, 177, 237, 0, 121, 103, 116, 14, 35, 159, 51, 119, 253, 129, 117, 60, 23, 95, 132, 171, 100, 7, 249, 131, 183, 179, 224, 43, 96, 82, 113, 159, 96, 125, 172, 211, 160, 136, 39, 79, 101, 89, 107, 208, 208, 153, 32, 182, 26, 181, 218, 97, 187, 220, 127, 80, 73, 51, 76, 241, 18, 19, 148, 93, 87, 229, 172, 125, 5, 93, 4, 43, 126, 2, 74, 162, 178, 240, 143, 10, 145, 38, 8, 5, 39, 45, 197, 16, 81, 198, 228, 122, 212, 250, 64, 59, 2, 180, 81, 11, 100, 122, 227, 209, 119, 11, 172, 3, 38, 168, 5, 187, 239, 212, 128, 86, 200, 193, 33, 189, 184, 182, 137, 23, 202, 170, 5, 67, 168, 8, 197, 57, 8, 246, 148, 209, 182, 231, 179, 141, 233, 12, 233, 216, 61, 80, 92, 161, 239, 27, 68, 45, 39, 39, 215, 208, 104, 49, 216, 178, 167, 146, 10, 252, 113, 216, 235, 80, 18, 15, 23, 160, 234, 152, 42, 136, 89, 29, 159, 67, 80, 62, 148, 168, 241, 171, 175, 46, 69, 137, 246, 90, 175, 183, 146, 60, 72, 69, 64, 168, 104, 136, 52, 50, 165, 198, 14, 117, 134, 11, 17, 229, 70, 91, 28, 154, 8, 135, 62, 194, 158, 132, 76, 28, 136, 140, 179, 150, 147, 48, 87, 255, 221, 84, 27, 3, 165, 34, 14, 218, 22, 178, 179, 166, 114, 142, 166, 120, 3, 76, 227, 156, 104, 57, 242, 3, 151, 32, 45, 124, 92, 68, 187, 104, 19, 79, 147, 25, 60, 236, 33, 80, 49, 177, 115, 153, 87, 122, 29, 229, 255, 31, 91, 6, 102, 189, 216, 144, 124, 97, 167, 101, 30, 78, 121, 224, 55, 41, 81, 80, 90, 7, 250, 115, 194, 87, 136, 219, 110, 184, 2, 53, 25, 165, 170, 151, 181, 31, 28, 173, 29, 67, 216, 170, 187, 255, 77, 195, 25, 199, 154, 88, 202, 252, 3, 82, 24, 116, 124, 47, 117, 218, 248, 242, 251, 124, 0, 196, 77, 168, 91, 18, 145, 19, 23, 61, 71, 34, 245, 178, 1, 182, 180, 69, 64, 98, 233, 234, 139, 167, 140, 92, 163, 202, 218, 247, 35, 139, 71, 186, 206, 92, 229, 97, 128, 74, 225, 107, 143, 75, 99, 218, 70, 69, 184, 69, 122, 147, 121, 60, 189, 100, 167, 37, 79, 21, 7, 129, 1, 157, 232, 126, 228, 38, 130, 148, 15, 62, 112, 168, 134, 131, 213, 18, 187, 44, 63, 183, 178, 67, 77, 165, 222, 219, 178, 208, 179, 251, 132, 135, 200, 77, 160, 213, 195, 21, 189, 214, 156, 70, 251, 5, 210, 55, 99, 242, 25, 26, 171, 213, 213, 194, 225, 42, 16, 184, 240, 2, 255, 104, 27, 253, 27, 46, 224, 191, 97, 157, 128, 210, 167, 149, 235, 34, 242, 170, 123, 133, 213, 255, 182, 113, 167, 12, 148, 128, 159, 13, 175, 197, 183, 62, 162, 251, 6, 87, 186, 226, 51, 115, 180, 147, 27, 201, 250, 50, 30, 136, 72, 239, 120, 137, 78, 152, 123, 255, 21, 13, 125, 103, 26, 238, 48, 179, 147, 26, 200, 197, 14, 11, 59, 8, 104, 239, 252, 56, 191, 72, 205, 36, 180, 184, 17, 162, 153, 90, 194, 160, 145, 34, 190, 217, 253, 159, 160, 197, 16, 168, 123, 16, 41, 8, 54, 173, 6, 200, 32, 51, 151, 181, 106, 120, 233, 160, 198, 28, 119, 229, 108, 203, 79, 27, 195, 211, 252, 174, 167, 85, 15, 53, 3, 239, 227, 15, 45, 36, 240, 8, 145, 203, 69, 98, 6, 5, 252, 250, 164, 41, 38, 135, 179, 167, 219, 124, 28, 5, 84, 169, 53, 121, 232, 137, 161, 33, 253, 143, 114, 100, 155, 36, 2, 153, 106, 8, 77, 35, 129, 197, 4, 49, 102, 103, 59, 56, 73, 228, 253, 30, 126, 228, 175, 36, 170, 142, 212, 67, 245, 109, 253, 107, 104, 255, 222, 68, 53, 169, 44, 215, 164, 172, 59, 199, 126, 26, 208, 203, 114, 134, 6, 207, 8, 191, 99, 134, 229, 65, 15];
        let kzg_bytes: Vec<u8> = vec![5, 0, 0, 0, 0, 0, 0, 0, 151, 241, 211, 167, 49, 151, 215, 148, 38, 149, 99, 140, 79, 169, 172, 15, 195, 104, 140, 79, 151, 116, 185, 5, 161, 78, 58, 63, 23, 27, 172, 88, 108, 85, 232, 63, 249, 122, 26, 239, 251, 58, 240, 10, 219, 34, 198, 187, 137, 92, 144, 148, 196, 176, 23, 52, 40, 62, 116, 68, 97, 192, 163, 86, 48, 245, 168, 245, 167, 177, 244, 19, 171, 198, 162, 47, 4, 3, 253, 30, 231, 228, 170, 129, 103, 98, 210, 178, 127, 252, 21, 85, 251, 239, 212, 160, 151, 59, 250, 141, 119, 189, 93, 244, 184, 194, 156, 53, 3, 176, 70, 138, 40, 226, 95, 70, 118, 255, 6, 156, 58, 241, 239, 58, 246, 204, 247, 8, 174, 234, 180, 252, 33, 124, 80, 197, 252, 209, 128, 115, 14, 151, 153, 66, 130, 238, 216, 125, 56, 53, 192, 221, 165, 180, 199, 23, 1, 79, 39, 108, 242, 238, 197, 2, 62, 234, 236, 81, 236, 36, 10, 253, 134, 46, 109, 237, 11, 176, 85, 159, 37, 134, 55, 116, 234, 56, 117, 69, 86, 222, 180, 254, 162, 132, 111, 33, 242, 8, 57, 64, 174, 24, 254, 191, 229, 187, 108, 208, 18, 234, 68, 10, 221, 131, 21, 55, 135, 184, 58, 249, 121, 2, 107, 73, 146, 157, 63, 235, 234, 108, 170, 100, 246, 82, 202, 198, 142, 173, 219, 18, 5, 0, 0, 0, 0, 0, 0, 0, 147, 224, 43, 96, 82, 113, 159, 96, 125, 172, 211, 160, 136, 39, 79, 101, 89, 107, 208, 208, 153, 32, 182, 26, 181, 218, 97, 187, 220, 127, 80, 73, 51, 76, 241, 18, 19, 148, 93, 87, 229, 172, 125, 5, 93, 4, 43, 126, 2, 74, 162, 178, 240, 143, 10, 145, 38, 8, 5, 39, 45, 197, 16, 81, 198, 228, 122, 212, 250, 64, 59, 2, 180, 81, 11, 100, 122, 227, 209, 119, 11, 172, 3, 38, 168, 5, 187, 239, 212, 128, 86, 200, 193, 33, 189, 184, 180, 7, 72, 167, 122, 88, 89, 232, 115, 212, 60, 235, 102, 165, 167, 203, 181, 90, 237, 2, 188, 16, 10, 2, 134, 248, 250, 27, 67, 77, 153, 225, 12, 116, 144, 135, 168, 188, 131, 129, 145, 235, 114, 2, 224, 231, 5, 23, 21, 176, 143, 74, 198, 223, 158, 127, 159, 210, 170, 233, 197, 58, 129, 173, 246, 252, 140, 172, 248, 106, 61, 129, 67, 18, 150, 114, 128, 218, 94, 135, 90, 108, 130, 89, 54, 231, 193, 125, 128, 129, 225, 33, 111, 49, 250, 243, 147, 110, 245, 83, 133, 189, 126, 144, 147, 147, 189, 78, 139, 3, 2, 83, 166, 106, 172, 206, 179, 179, 89, 171, 155, 160, 149, 36, 43, 180, 89, 107, 116, 37, 207, 9, 19, 153, 238, 219, 201, 8, 115, 25, 0, 192, 8, 9, 9, 20, 221, 245, 112, 143, 175, 182, 8, 224, 236, 117, 237, 181, 34, 96, 114, 94, 83, 118, 142, 139, 86, 75, 148, 24, 10, 216, 176, 171, 254, 53, 82, 32, 198, 154, 218, 93, 173, 120, 36, 179, 14, 94, 208, 223, 139, 172, 130, 34, 65, 235, 91, 70, 49, 36, 109, 234, 36, 174, 147, 150, 246, 102, 121, 112, 235, 109, 167, 212, 80, 180, 101, 149, 132, 169, 94, 68, 88, 178, 106, 65, 199, 245, 73, 133, 202, 182, 68, 84, 227, 163, 139, 128, 197, 137, 15, 49, 179, 176, 0, 146, 204, 228, 5, 57, 118, 134, 126, 70, 85, 144, 206, 255, 7, 204, 147, 25, 227, 197, 21, 206, 44, 110, 135, 108, 40, 147, 199, 29, 145, 112, 148, 167, 12, 111, 118, 124, 127, 67, 132, 240, 120, 171, 142, 250, 62, 45, 26, 87, 193, 144, 125, 176, 17, 112, 132, 222, 172, 4, 19, 220, 34, 255, 77, 52, 176, 37, 61, 174, 239, 196, 64, 220, 253, 72, 35, 51, 55, 146, 164, 231, 133, 16, 176, 112, 159, 124, 2, 187, 187, 223, 14, 231, 62, 153, 66, 22, 226, 190, 61, 27, 176, 144, 158, 26, 194, 198, 143, 97, 22, 246, 24, 240, 223, 114, 228, 251, 100, 66, 121, 60, 216, 53, 22, 83, 97, 26, 30, 71, 40, 174, 237, 196, 154, 11, 2, 165, 188, 163];
        // println!("agg_bytes: {:?}", hex::encode(&agg_bytes.clone()));
        // println!("kzg_bytes: {:?}", hex::encode(&kzg_bytes.clone()));
        let t = 2;
        let kzg = PowersOfTau::<E>::deserialize_compressed(&kzg_bytes[..]).unwrap();
        let key = AggregateKey::<E>::deserialize_compressed(&agg_bytes[..]).unwrap();
        // let cct_btes = [176, 158, 81, 44, 116, 185, 57, 86, 71, 144, 218, 41, 142, 232, 147, 195, 86, 255, 216, 46, 222, 49, 144, 188, 190, 189, 83, 229, 29, 145, 15, 191, 103, 14, 162, 26, 42, 162, 169, 90, 13, 237, 27, 131, 196, 8, 187, 23, 6, 147, 247, 52, 28, 26, 72, 161, 148, 169, 240, 229, 107, 128, 40, 250, 252, 70, 88, 225, 241, 229, 27, 73, 230, 195, 88, 43, 59, 139, 135, 140, 233, 153, 136, 106, 157, 17, 168, 188, 193, 14, 248, 155, 50, 106, 211, 96, 128, 96, 62, 158, 233, 112, 103, 172, 8, 75, 232, 26, 70, 73, 80, 232, 194, 5, 170, 175, 46, 99, 176, 17, 216, 20, 218, 250, 231, 253, 253, 76, 197, 31, 134, 38, 171, 60, 47, 193, 229, 174, 70, 71, 63, 247, 44, 160, 184, 50, 244, 7, 52, 127, 46, 25, 202, 92, 145, 202, 213, 237, 162, 253, 163, 51, 81, 57, 119, 100, 241, 172, 187, 3, 74, 31, 44, 48, 185, 223, 9, 1, 22, 26, 190, 44, 173, 187, 233, 231, 44, 128, 250, 255, 101, 234, 139, 247, 128, 66, 147, 80, 115, 240, 227, 148, 150, 131, 232, 98, 18, 121, 218, 127, 204, 178, 15, 49, 12, 136, 238, 86, 232, 244, 160, 162, 99, 202, 166, 193, 29, 159, 229, 234, 185, 226, 128, 245, 87, 36, 168, 108, 41, 227, 13, 211, 128, 3, 57, 153, 180, 75, 51, 48, 139, 237, 114, 62, 5, 1, 86, 20, 159, 254, 128, 54, 62, 178, 6, 128, 104, 209, 209, 17, 4, 250, 209, 119, 7, 10, 225, 82, 48, 194, 92, 117, 153, 8, 233, 244, 30, 243, 184, 34, 123, 103, 244, 86, 181, 73, 209, 8, 214, 16, 77, 154, 15, 27, 146, 89, 15, 120, 45, 213, 63, 6, 212, 95, 61, 28, 178, 23, 155, 45, 221, 128, 153, 208, 3, 112, 164, 102, 80, 20, 23, 71, 38, 44, 13, 205, 16, 150, 161, 210, 219, 192, 185, 42, 215, 76, 1, 233, 41, 156, 184, 219, 113, 161, 158, 141, 116, 154, 158, 195, 215, 76, 236, 244, 83, 2, 221, 118, 116, 113, 231, 145, 124, 53, 31, 232, 77, 129, 162, 139, 144, 88, 76, 181, 152, 188, 207, 80, 163, 117, 192, 187, 78, 156, 118, 219, 220, 33, 11, 223, 90, 153, 57, 15, 190, 18, 234, 98, 108, 182, 36, 105, 105, 56, 38, 160, 199, 75, 170, 102, 188, 129, 209, 107, 206, 64, 5, 85, 133, 0, 191, 206, 11, 237, 78, 188, 108, 97, 137, 54, 25, 151, 244, 215, 163, 45, 2, 196, 83, 246, 61, 232, 230, 4, 140, 6, 203, 45, 1, 134, 14, 90, 84, 106, 225, 175, 228, 201, 65, 81, 31, 100, 40, 68, 104, 90, 24, 187, 14, 140, 174, 207, 1, 161, 58, 183, 251, 221, 170, 96, 107, 64, 87, 61, 111, 71, 203, 180, 241, 152, 254, 16, 67, 190, 69, 126, 129, 108, 92, 73, 118, 194, 181, 96, 247, 54, 158, 152, 150, 176, 234, 81, 119, 223, 155, 14, 28, 45, 21, 243, 39, 227, 75, 194, 225, 236, 62, 150, 214, 116, 32, 25, 143, 211, 61, 160, 254, 242, 210, 148, 170, 117, 255, 18, 119, 195, 130, 58, 113, 168, 180, 64, 220, 126, 203, 102, 240, 8, 232, 219, 187, 225, 131, 82, 130, 161, 142, 244, 200, 34, 127, 36, 95, 239, 221, 70, 114, 150, 10, 153, 96, 214, 205, 33, 165, 111, 220, 28, 34, 50, 111, 252, 205, 73, 171, 140, 163, 182, 226, 104, 227, 206, 116, 75, 142, 222, 101, 114, 113, 172, 194, 202, 26, 134, 12, 167, 131, 44, 94, 128, 59, 121, 35, 24, 229, 57, 61, 149, 22, 232, 86, 245, 143, 72, 32, 26, 66, 46, 141, 95, 155, 112, 164, 147, 72, 122, 86, 24, 23, 239, 43, 231, 149, 15, 58, 95, 182, 184, 224, 44, 50, 37, 140, 90, 236, 48, 157, 108, 19, 198, 120, 176, 118, 33, 210, 77, 180, 26, 76, 58, 65, 210, 84, 159, 163, 156, 216, 144, 166, 164, 181, 177, 207, 112, 37, 129, 7, 226, 226, 239, 93, 46, 23, 101, 97, 101, 26, 246, 78, 229, 13, 177, 48, 18, 109, 236, 143, 87, 22, 20, 70, 82, 151, 196, 175, 210, 187, 144, 241, 237, 32, 128, 2, 73, 31, 128, 45, 252, 242, 80, 84, 180, 163, 103, 189, 112, 218, 15, 104, 28, 153, 245, 8, 62, 148, 117, 118, 0, 20, 192, 8, 249, 62, 7, 189, 227, 154, 18, 215, 176, 41, 240, 243, 150, 243, 121, 85, 171, 209, 97, 88, 82, 229, 9, 180, 30, 99, 192, 85, 70, 222, 199, 48, 57, 5, 253, 88, 81, 149, 196, 179, 40, 165, 136, 68, 22, 208, 145, 144, 242, 93, 58, 248, 66, 241, 186, 155, 247, 114, 27, 121, 52, 5, 215, 203, 103, 186, 110, 121, 208, 202, 131, 145, 180, 141, 159, 32, 244, 245, 201, 239, 46, 111, 67, 144, 168, 165, 6, 231, 183, 76, 118, 187, 19, 47, 153, 214, 4, 98, 56, 151, 179, 214, 182, 208, 160, 83, 240, 23, 15, 231, 47, 133, 161, 65, 145, 202, 82, 0, 33, 123, 214, 6, 8, 218, 244, 184, 4, 117, 218, 252, 62, 208, 177, 180, 159, 146, 19, 123, 150, 37, 6, 251, 227, 17, 231, 107, 150, 133, 201, 137, 1, 177, 229, 206, 242, 70, 150, 56, 30, 97, 237, 223, 17, 201, 124, 15, 11, 239, 231, 26, 103, 54, 161, 141, 91, 173, 211, 36, 31, 197, 146, 50, 46, 52, 100, 252, 165, 206, 22, 148, 14, 167, 99, 48, 152, 23, 68, 17, 142, 109, 146, 234, 42, 101, 103, 216, 155, 99, 251, 129, 172, 216, 98, 48, 221, 186, 195, 96, 184, 216, 186, 53, 168, 239, 243, 94, 124, 219, 215, 241, 97, 225, 36, 44, 249, 132, 21, 16, 45, 83, 125, 0, 166, 127, 98, 15, 243, 141, 152, 34, 104, 113, 140, 129, 64, 238, 206, 209, 97, 73, 4, 125, 54, 42, 193, 116, 66, 25, 19, 189, 229, 168, 160, 138, 135, 44, 61, 167, 252, 4, 195, 157, 223, 234, 15, 252, 238, 24, 188, 83, 97, 122, 239, 136, 186, 88, 19, 211, 3, 99, 29, 59, 246, 254, 232, 171, 124, 80, 134, 180, 90, 110, 202, 174, 39, 118, 201, 151, 54, 138, 208, 21, 225, 94, 96, 234, 209, 183, 141, 200, 141, 125, 9, 85, 222, 81, 46, 173, 21, 14, 223, 204, 75, 24, 61, 173, 197, 233, 37, 13, 53, 199, 152, 167, 249, 112, 158, 134, 75, 82, 6, 148, 202, 116, 80, 88, 86, 218, 54, 136, 52, 107, 174, 253, 58, 240, 17, 191, 77, 186, 3, 152, 134, 17, 48, 234, 112, 41, 95, 246, 223, 226, 118, 10, 195, 99, 127, 34, 22, 44, 128, 196, 173, 197, 228, 35, 95, 12, 180, 169, 28, 63, 159, 32, 97, 251, 255, 206, 35, 90, 174, 186, 232, 171, 207, 232, 143, 73, 25, 219, 142, 63, 47, 195, 212, 95, 6, 47, 54, 5, 218, 190, 156, 31, 57, 143, 110, 155, 253, 181, 14, 6, 14, 117, 62, 69, 121, 235, 60, 223, 83, 62, 167, 48, 189, 98, 240, 222, 184, 70, 168, 195, 217, 38, 10, 78, 6, 28, 34, 139, 56, 89, 216, 76, 106, 28, 182, 8, 83, 186, 159, 233, 96, 249, 125, 191, 181, 245, 39, 111, 235, 218, 145, 139, 241, 147, 127, 180, 87, 54, 244, 89, 109, 99, 41, 140, 29, 176, 235, 44, 130, 146, 20, 143, 6, 152, 66, 243, 202, 166, 65, 7, 87, 198, 165, 15, 37, 141, 133, 28, 88, 251, 247, 180, 68, 208, 105, 116, 48, 233, 21, 173, 82, 163, 104, 27, 189, 108, 87, 203, 73, 196, 148, 211, 154, 214, 147, 140, 146, 184, 202, 56, 14, 2, 0, 0, 0, 0, 0, 0, 0];
        println!("kzg = {kzg:?}");
        println!("agg key = {key:?}");

        // for (i, value) in kzg.powers_of_g.iter().enumerate() {
        //     let mut value_bytes = vec![];
        //     value.serialize_compressed(&mut value_bytes).unwrap();
        //     println!("powers_of_g[{}] serialized and encoded as hex: {:?}", i, hex::encode(value_bytes));
        // }

        // for (i, value) in kzg.powers_of_h.iter().enumerate() {
        //     let mut value_bytes = vec![];
        //     value.serialize_compressed(&mut value_bytes).unwrap();
        //     println!("powers_of_h[{}] serialized and encoded as hex: {:?}", i, hex::encode(value_bytes));
        // }

        let ct = encrypt(&key, t, &kzg);
        let mut ct_bytes = vec![];
        ct.serialize_compressed(&mut ct_bytes).unwrap();
        println!("Compressed ciphertext: {:?}", hex::encode(ct_bytes.clone()));

        let shared_secret = {
            let salt = [0u8; 32]; // Use a unique salt in a real application
            let mut ikm = vec![];
            ct.enc_key.serialize_compressed(&mut ikm).unwrap();
            println!("ikm: {:?}", hex::encode(ikm.clone()));

            // Use a unique salt in a real application
            let info = b"aes_encryption";
            let hk = Hkdf::<Sha256>::new(Some(&salt), &ikm);

            let mut okm = [0u8; 32]; // Output key material (256-bit key)
            hk.expand(info, &mut okm).expect("HKDF expand failed");
            okm
        };
        println!("shared_secret: {:?}", hex::encode(shared_secret));

        // Encrypt a message using the derived shared secret
        let chachakey = Key::from_slice(&shared_secret);
        let cipher = ChaCha20Poly1305::new(chachakey);

        let nonce = Nonce::from_slice(b"unique nonce"); // 12-bytes; unique per message
        let plaintext = br#"{"model":"llama3.1:latest","messages":[{"role":"user","content":"let's see if exo is running"},{"role":"assistant","content":"To check if EXO is running, I'll try a few things. Here are the results:\n\n1. **EXO System Monitoring**: I've checked online resources and couldn't find any information about EXO as an operating system or software application.\n2. **Database Search**: A search of popular databases like Wikipedia, Wikidata, and Crunchbase did not yield any significant results related to EXO (as in, a specific project, software, or tool).\n3. **General Knowledge Check**: While I'm familiar with many aspects of technology and computing, I couldn't find any indication that EXO represents a well-known system, tool, or process."},{"role":"user","content":"cool"},{"role":"assistant","content":"It was brief but fun! If you're wondering about something specific (maybe an acronym or project), feel free to ask me, and I'll do my best to help. No worries if I don't know - we can play guessing games or explore the unknown together! How's your day going so far?"},{"role":"user","content":"yes some cool project idea would be nice"}],"stream":false}"#;
        let ciphertext = cipher.encrypt(nonce, plaintext.as_ref()).expect("encryption failure!");

        println!("Nonce: {:?}", hex::encode(nonce));
        println!("Ciphertext: {:?}", hex::encode(ciphertext));

        // 0xda80a2c71ce9b0db9a823fb37bc3a08a8bda1b31d3da741bdc718797eb697856
        // 0x756e69717565206e6f6e6365
        // 0xda80a2c71ce9b0db9a823fb37bc3a08a8bda1b31d3da741bdc718797eb69c152ab7df5a9f4cb461411a89182c8f2bd9a1a99b1de25b400c48ffbfe9e0e830d951158ded3300b009edaba4732717caf132b937c9d5780d0b96ce116b554cef01ccd2161fccd37011434f0c437d591da860f9cd6d66b96a00e0e1df796bffe72931a00557d0719862a143469f8a00411b75dcdc011e1532b57de404a1ac922d45cca69e0613cba0428ba42aa005d455acf8af59a4712448f02e31d7d8e11d3812a260a349d974686935eefb7622e09d9fc4327927f6dc0cce43c9445e2ae3ed613cc705d4ad8fef9c092f450809428aa3a3cad2094a04b7d4e34ec88522e2dde087e10d6d11ca23752970ad0032c8d5a9c5d13608fca71672921953d5721012b4dec14b4396cc82202125a98f988257c89f0549fb1b537d233e5cfc24afff109491be1ff3ca799b20ab69c9aad6c363075908e6e90a974c0ad2ac3837c9fd660ad364507b3cbc8fd3cd958a72874a1e78f86b9d59233579d14949c7441a2506d2f5e57cee235ba297d89f7bb4b0e0dfa3ab1320e7aa7f02995d05a4ed6b0cc548192a152ed3735958f9af96a9d0d9f2419636429f2446111efde622e38647111daeb18c76e1a7c58f86c66999506916dd62b6e8b6d6454029215e676b3c60a2e3eb27cf6a5e7991a3777a2597df1610286c6c89a6cafea87e86970d915adf6582bb45ac27aa6e80bbc17de8d2a2ce8c6b94c3ae4a62f5735c07f2a6d4dd6cbca24bf6f383d878dfe84bb0275a37f4bcaebaecc81fb0cb042615a623a692efaa13a758e07c250c5f547f00655ed8267df35aa1b8e9a692c71cefb3a66aab322cb83eb2568b42ec3ef39292877212f728ac914f9a387bc869a066c920552c0d165c8f488350a975b832c8a1b1f95ae36fcd497e2b1e4c11a8839c7f4d3dfd115faf360c4446ea8456eb996b0a0548e953db431994e02d5063e776cdad12e0b6d1275e979943b177ab871e854bd1b9f48514a25aead699fd4f3a5753ae46ffa0162fc9bbdbbfccda0eda96d9c2acadde4c3fddbb4e0387ff9813b115a31fe9f5a8647b8d129bdae9d597000050f0583a5e035933d2dcaab8a7ec30caac0a3d1455689a97adc54ab005e6dcd93f7125d1a5138a2ebf0a4742cf6e4698ce26deb2b8e618c7460692ca957f8ea50f29e8e3316fb055b51ff9a3ecfcbf49c12bbc5beddb7bb1fde43f235a33e74fdd52cba93bc5612afe9b40952669346cba4b514637030d535f40445c71f5398bb63cd017a2cfbfb64e3d3413c29cb107f92fbcd36d6c0cab50f14e37d6e53eca727c6b92a27512cada89bb56e75330dfccc6c71de2c25f2f613e3bebd6b98b1f22d99210da247d42a71f321de9dc112a0a4446ae54b33995971b892e15905859ee7501ddb93969eb4261946ad4ff78d791dc2493ede67e6f9b78ba2049eb5a7e741a6d1355a387ad23e0dd3aea150df599ce30151dd84ee88c79d648b2e08f39ad491f0a7a82436d9e23ea71e77197ba15d6a94d208a36fa5c5264549193c2a221019230c41f09c1f9d7128dddac2057ecc4fb05d8f8b86ad95ce5ff27fa8ac81380a4889330005febf35afad0228a6396613b0d3b18c7d4b205519445cde88a9862b24f2ba3c3dac8400377506
        // 0xb09e512c74b939564790da298ee893c356ffd82ede3190bcbebd53e51d910fbf670ea21a2aa2a95a0ded1b83c408bb170693f7341c1a48a194a9f0e56b8028fafc4658e1f1e51b49e6c3582b3b8b878ce999886a9d11a8bcc10ef89b326ad36080603e9ee97067ac084be81a464950e8c205aaaf2e63b011d814dafae7fdfd4cc51f8626ab3c2fc1e5ae46473ff72ca0b832f407347f2e19ca5c91cad5eda2fda33351397764f1acbb034a1f2c30b9df0901161abe2cadbbe9e72c80faff65ea8bf78042935073f0e3949683e8621279da7fccb20f310c88ee56e8f4a0a263caa6c11d9fe5eab9e280f55724a86c29e30dd380033999b44b33308bed723e050156149ffe80363eb2068068d1d11104fad177070ae15230c25c759908e9f41ef3b8227b67f456b549d108d6104d9a0f1b92590f782dd53f06d45f3d1cb2179b2ddd8099d00370a46650141747262c0dcd1096a1d2dbc0b92ad74c01e9299cb8db71a19e8d749a9ec3d74cecf45302dd767471e7917c351fe84d81a28b90584cb598bccf50a375c0bb4e9c76dbdc210bdf5a99390fbe12ea626cb62469693826a0c74baa66bc81d16bce4005558500bfce0bed4ebc6c6189361997f4d7a32d02c453f63de8e6048c06cb2d01860e5a546ae1afe4c941511f642844685a18bb0e8caecf01a13ab7fbddaa606b40573d6f47cbb4f198fe1043be457e816c5c4976c2b560f7369e9896b0ea5177df9b0e1c2d15f327e34bc2e1ec3e96d67420198fd33da0fef2d294aa75ff1277c3823a71a8b440dc7ecb66f008e8dbbbe1835282a18ef4c8227f245fefdd4672960a9960d6cd21a56fdc1c22326ffccd49ab8ca3b6e268e3ce744b8ede657271acc2ca1a860ca7832c5e803b792318e5393d9516e856f58f48201a422e8d5f9b70a493487a561817ef2be7950f3a5fb6b8e02c32258c5aec309d6c13c678b07621d24db41a4c3a41d2549fa39cd890a6a4b5b1cf70258107e2e2ef5d2e176561651af64ee50db130126dec8f571614465297c4afd2bb90f1ed208002491f802dfcf25054b4a367bd70da0f681c99f5083e9475760014c008f93e07bde39a12d7b029f0f396f37955abd1615852e509b41e63c05546dec7303905fd585195c4b328a5884416d09190f25d3af842f1ba9bf7721b793405d7cb67ba6e79d0ca8391b48d9f20f4f5c9ef2e6f4390a8a506e7b74c76bb132f99d604623897b3d6b6d0a053f0170fe72f85a14191ca5200217bd60608daf4b80475dafc3ed0b1b49f92137b962506fbe311e76b9685c98901b1e5cef24696381e61eddf11c97c0f0befe71a6736a18d5badd3241fc592322e3464fca5ce16940ea76330981744118e6d92ea2a6567d89b63fb81acd86230ddbac360b8d8ba35a8eff35e7cdbd7f161e1242cf98415102d537d00a67f620ff38d982268718c8140eeced16149047d362ac174421913bde5a8a08a872c3da7fc04c39ddfea0ffcee18bc53617aef88ba5813d303631d3bf6fee8ab7c5086b45a6ecaae2776c997368ad015e15e60ead1b78dc88d7d0955de512ead150edfcc4b183dadc5e9250d35c798a7f9709e864b520694ca74505856da3688346baefd3af011bf4dba0398861130ea70295ff6dfe2760ac3637f22162c80c4adc5e4235f0cb4a91c3f9f2061fbffce235aaebae8abcfe88f4919db8e3f2fc3d45f062f3605dabe9c1f398f6e9bfdb50e060e753e4579eb3cdf533ea730bd62f0deb846a8c3d9260a4e061c228b3859d84c6a1cb60853ba9fe960f97dbfb5f5276febda918bf1937fb45736f4596d63298c1db0eb2c8292148f069842f3caa6410757c6a50f258d851c58fbf7b444d0697430e915ad52a3681bbd6c57cb49c494d39ad6938c92b8ca380e0200000000000000
    }

    fn print_compressed_hex<T: CanonicalSerialize>(label: &str, element: &T) {
        let mut bytes = vec![];
        element.serialize_compressed(&mut bytes).unwrap();
        println!("{}: {:?}", label, hex::encode(bytes));
    }

    #[test]
    fn test_g1_g2_operations() {

        let mut rng = ark_std::test_rng();

        let g1_gen = G1::generator();
        let double_g1_gen = g1_gen.double();
        print_compressed_hex("G1 generator doubled", &double_g1_gen);

        let g2_gen = G2::generator();
        let double_g2_gen = g2_gen.double();
        print_compressed_hex("G2 generator doubled", &double_g2_gen);

        // Test G1 operations
        let g1_a = G1::rand(&mut rng);
        let g1_b = G1::rand(&mut rng);
        let g1_zero = G1::zero();

        print_compressed_hex("G1 a", &g1_a);
        print_compressed_hex("G1 b", &g1_b);
        print_compressed_hex("G1 zero", &g1_zero);

        let g1_add = g1_a + g1_b;
        let g1_sub = g1_a - g1_b;
        let g1_neg = -g1_a;
        let g1_double = g1_a.double();

        print_compressed_hex("G1 a + b", &g1_add);
        print_compressed_hex("G1 a - b", &g1_sub);
        print_compressed_hex("G1 -a", &g1_neg);
        print_compressed_hex("G1 2a", &g1_double);

        // Test G2 operations
        let g2_a = G2::rand(&mut rng);
        let g2_b = G2::rand(&mut rng);
        let g2_zero = G2::zero();

        print_compressed_hex("G2 a", &g2_a);
        print_compressed_hex("G2 b", &g2_b);
        print_compressed_hex("G2 zero", &g2_zero);

        let g2_add = g2_a + g2_b;
        let g2_sub = g2_a - g2_b;
        let g2_neg = -g2_a;
        let g2_double = g2_a.double();

        print_compressed_hex("G2 a + b", &g2_add);
        print_compressed_hex("G2 a - b", &g2_sub);
        print_compressed_hex("G2 -a", &g2_neg);
        print_compressed_hex("G2 2a", &g2_double);

        // Test extension field operations
        let fq12_a = GT::rand(&mut rng);
        let fq12_b = GT::rand(&mut rng);
        let fq12_zero = GT::zero();
        let fq12_one = GT::one();

        print_compressed_hex("Fq12 a", &fq12_a);
        print_compressed_hex("Fq12 b", &fq12_b);
        print_compressed_hex("Fq12 zero", &fq12_zero);
        print_compressed_hex("Fq12 one", &fq12_one);

        let fq12_add = fq12_a + fq12_b;
        let fq12_sub = fq12_a - fq12_b;
        let fq12_neg = -fq12_a;
        let fq12_mul = fq12_a * fq12_b;
        let fq12_inv = fq12_a.inverse().unwrap();

        print_compressed_hex("Fq12 a + b", &fq12_add);
        print_compressed_hex("Fq12 a - b", &fq12_sub);
        print_compressed_hex("Fq12 -a", &fq12_neg);
        print_compressed_hex("Fq12 a * b", &fq12_mul);
        print_compressed_hex("Fq12 a^-1", &fq12_inv);

        let tt = Fp12::rand(&mut rng);
        // tt.to_cyclotomic_exponentiation();
    }
}
